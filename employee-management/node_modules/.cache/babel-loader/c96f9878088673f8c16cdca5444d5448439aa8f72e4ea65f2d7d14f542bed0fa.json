{"ast":null,"code":"var _jsxFileName = \"D:\\\\sai\\\\SpringBoot\\\\em-project\\\\employee-management\\\\src\\\\components\\\\EmployeeLogin.js\",\n  _s = $RefreshSig$();\n// import React, { useState } from 'react';\n// import { useNavigate } from 'react-router-dom';\n// import '../styles/Login.css'; // Make sure this path is correct\n\n// const EmployeeLogin = () => {\n//   const [email, setEmail] = useState('');\n//   const [password, setPassword] = useState('');\n//   const navigate = useNavigate();\n\n//   const handleSubmit = (e) => {\n//     e.preventDefault();\n//     // Dummy authentication for employee\n//     if (email === 'employee@gmail.com' && password === 'emp123') {\n//       navigate('/employee-dashboard');\n//     } else {\n//       alert('Invalid login credentials');\n//     }\n//   };\n\n//   return (\n//     <div className=\"login-container\"> \n//       <h2>Employee Login</h2>\n//       <input\n//         type=\"text\"\n//         value={email}\n//         onChange={(e) => setEmail(e.target.value)}\n//         placeholder=\"Email\"\n//       />\n//       <input\n//         type=\"password\"\n//         value={password}\n//         onChange={(e) => setPassword(e.target.value)}\n//         placeholder=\"Password\"\n//       />\n//       <button onClick={handleSubmit}>Login</button>\n//     </div>\n//   );\n// };\n\n// export default EmployeeLogin;\n\nimport React, { useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport axios from 'axios'; // Assuming you're using Axios for API calls\nimport '../styles/Login.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst EmployeeLogin = () => {\n  _s();\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [error, setError] = useState('');\n  const navigate = useNavigate();\n  const handleSubmit = async e => {\n    e.preventDefault();\n    try {\n      // API call to authenticate employee\n      const response = await axios.post('/api/employee/login', {\n        email,\n        password\n      });\n      const {\n        employeeId\n      } = response.data; // Assuming the API returns the employee's unique ID on successful login\n\n      // Store the employee's ID in localStorage or sessionStorage\n      localStorage.setItem('employeeId', employeeId);\n\n      // Redirect to the employee's dashboard or profile\n      navigate(`/profile`);\n    } catch (error) {\n      setError('Invalid login credentials. Please try again.');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"login-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Employee Login\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: email,\n        onChange: e => setEmail(e.target.value),\n        placeholder: \"Email\",\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"password\",\n        value: password,\n        onChange: e => setPassword(e.target.value),\n        placeholder: \"Password\",\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Login\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"error-message\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 5\n  }, this);\n};\n_s(EmployeeLogin, \"04s5JR+/x8JdloJ2sm+29L/IvyI=\", false, function () {\n  return [useNavigate];\n});\n_c = EmployeeLogin;\nexport default EmployeeLogin;\nvar _c;\n$RefreshReg$(_c, \"EmployeeLogin\");","map":{"version":3,"names":["React","useState","useNavigate","axios","jsxDEV","_jsxDEV","EmployeeLogin","_s","email","setEmail","password","setPassword","error","setError","navigate","handleSubmit","e","preventDefault","response","post","employeeId","data","localStorage","setItem","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","type","value","onChange","target","placeholder","required","_c","$RefreshReg$"],"sources":["D:/sai/SpringBoot/em-project/employee-management/src/components/EmployeeLogin.js"],"sourcesContent":["// import React, { useState } from 'react';\r\n// import { useNavigate } from 'react-router-dom';\r\n// import '../styles/Login.css'; // Make sure this path is correct\r\n\r\n// const EmployeeLogin = () => {\r\n//   const [email, setEmail] = useState('');\r\n//   const [password, setPassword] = useState('');\r\n//   const navigate = useNavigate();\r\n\r\n//   const handleSubmit = (e) => {\r\n//     e.preventDefault();\r\n//     // Dummy authentication for employee\r\n//     if (email === 'employee@gmail.com' && password === 'emp123') {\r\n//       navigate('/employee-dashboard');\r\n//     } else {\r\n//       alert('Invalid login credentials');\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"login-container\"> \r\n//       <h2>Employee Login</h2>\r\n//       <input\r\n//         type=\"text\"\r\n//         value={email}\r\n//         onChange={(e) => setEmail(e.target.value)}\r\n//         placeholder=\"Email\"\r\n//       />\r\n//       <input\r\n//         type=\"password\"\r\n//         value={password}\r\n//         onChange={(e) => setPassword(e.target.value)}\r\n//         placeholder=\"Password\"\r\n//       />\r\n//       <button onClick={handleSubmit}>Login</button>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default EmployeeLogin;\r\n\r\nimport React, { useState } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport axios from 'axios'; // Assuming you're using Axios for API calls\r\nimport '../styles/Login.css';\r\n\r\nconst EmployeeLogin = () => {\r\n  const [email, setEmail] = useState('');\r\n  const [password, setPassword] = useState('');\r\n  const [error, setError] = useState('');\r\n  const navigate = useNavigate();\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n\r\n    try {\r\n      // API call to authenticate employee\r\n      const response = await axios.post('/api/employee/login', { email, password });\r\n      const { employeeId } = response.data; // Assuming the API returns the employee's unique ID on successful login\r\n\r\n      // Store the employee's ID in localStorage or sessionStorage\r\n      localStorage.setItem('employeeId', employeeId);\r\n\r\n      // Redirect to the employee's dashboard or profile\r\n      navigate(`/profile`);\r\n    } catch (error) {\r\n      setError('Invalid login credentials. Please try again.');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"login-container\">\r\n      <h2>Employee Login</h2>\r\n      <form onSubmit={handleSubmit}>\r\n        <input\r\n          type=\"text\"\r\n          value={email}\r\n          onChange={(e) => setEmail(e.target.value)}\r\n          placeholder=\"Email\"\r\n          required\r\n        />\r\n        <input\r\n          type=\"password\"\r\n          value={password}\r\n          onChange={(e) => setPassword(e.target.value)}\r\n          placeholder=\"Password\"\r\n          required\r\n        />\r\n        <button type=\"submit\">Login</button>\r\n      </form>\r\n      {error && <p className=\"error-message\">{error}</p>}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default EmployeeLogin;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}